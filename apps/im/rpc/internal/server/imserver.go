// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: im.proto

package server

import (
	"context"

	"github.com/peter6866/SimpleChatter/apps/im/rpc/im"
	"github.com/peter6866/SimpleChatter/apps/im/rpc/internal/logic"
	"github.com/peter6866/SimpleChatter/apps/im/rpc/internal/svc"
)

type ImServer struct {
	svcCtx *svc.ServiceContext
	im.UnimplementedImServer
}

func NewImServer(svcCtx *svc.ServiceContext) *ImServer {
	return &ImServer{
		svcCtx: svcCtx,
	}
}

// Get Chat log
func (s *ImServer) GetChatLog(ctx context.Context, in *im.GetChatLogReq) (*im.GetChatLogResp, error) {
	l := logic.NewGetChatLogLogic(ctx, s.svcCtx)
	return l.GetChatLog(in)
}

// Setup conversation (DM, Group)
func (s *ImServer) SetUpUserConversation(ctx context.Context, in *im.SetUpUserConversationReq) (*im.SetUpUserConversationResp, error) {
	l := logic.NewSetUpUserConversationLogic(ctx, s.svcCtx)
	return l.SetUpUserConversation(in)
}

// Get Conversations
func (s *ImServer) GetConversations(ctx context.Context, in *im.GetConversationsReq) (*im.GetConversationsResp, error) {
	l := logic.NewGetConversationsLogic(ctx, s.svcCtx)
	return l.GetConversations(in)
}

// Put Conversations
func (s *ImServer) PutConversations(ctx context.Context, in *im.PutConversationsReq) (*im.PutConversationsResp, error) {
	l := logic.NewPutConversationsLogic(ctx, s.svcCtx)
	return l.PutConversations(in)
}

func (s *ImServer) CreateGroupConversation(ctx context.Context, in *im.CreateGroupConversationReq) (*im.CreateGroupConversationResp, error) {
	l := logic.NewCreateGroupConversationLogic(ctx, s.svcCtx)
	return l.CreateGroupConversation(in)
}
